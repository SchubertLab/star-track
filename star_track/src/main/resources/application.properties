
spring.profiles.active=dev
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=true
spring.jackson.serialization.fail-on-empty-beans=false
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=100
#spring.jpa.hibernate.ddl-auto=create
# App Properties
app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
#spring.devtools.remote.proxy.proxySet=true
#spring.devtools.remote.proxy.host==medwww.med.uni-muenchen.de
#spring.devtools.remote.proxy.port=8080
logging.level.org.springframework.boot.autoconfigure=ERROR
# TEST neu, korrigiert und okay!
CPCMPIDDispatcherUrl=https://umgpid05.gwdg.de/apps/WebObjects/ST21-productive-01-PIDDispatcher.woa
#https://umgpid00.gwdg.de/apps/WebObjects/ST21-setup-07-PIDDispatcher.woa
CPCMPIDDispatcherApiToken=N-HMz3UGks6bEWeVrWm1m5ouQ_vKtZf3
#uhcVP-ypA3KME_4mRe
# Flags f\u00fcr das Laden der AltPIDs
java.net.us
LOCAL_BEFORE_REMOTE_PIDS=true
REMOTE_PIDS=true
LOCAL_AFTER_REMOTE_PIDS=false
spring.datasource.hikari.leak-detection-threshold=60000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.

# For detailed logging during development
#logging.level.com=TRACE
#logging.level.org.springframework=TRACE
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE
# Social login provider props
spring.security.oauth2.client.registration.google.clientId=<your-client-id>
spring.security.oauth2.client.registration.google.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.facebook.clientId=<your-client-id>
spring.security.oauth2.client.registration.facebook.clientSecret=<your-client-secret>
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
spring.security.oauth2.client.registration.github.clientId=<your-client-id>
spring.security.oauth2.client.registration.github.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.clientId=<your-client-id>
spring.security.oauth2.client.registration.linkedin.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.client-authentication-method=post
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile, r_emailaddress
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.client-name=Linkedin
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
linkedin.email-address-uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
spring.datasource.hikari.leakDetectionThreshold=2000